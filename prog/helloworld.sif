//---------------------------------------------------------------------------------------------
//	Hello world test code for SIFP (c) 2023-... zpekic@hotmail.com
//  Compile with https://github.com/zpekic/MicroCodeCompiler
//---------------------------------------------------------------------------------------------
// Test code to load into internal ROM of SIFP microcomputer
// Full description: 
// https://hackaday.io/project/173996-sifp-single-instruction-format-processor
//---------------------------------------------------------------------------------------------
			.code 9, 16, helloworld_code.mif, helloworld_code.cgf, helloworld_code.coe, cpu:helloworld_code.vhd, helloworld_code.hex, helloworld_code.bin, 2;
			.symbol 9, 256, helloworld_sym.mif, helloworld_sym.cgf, helloworld_sym.coe, sym:helloworld_sym.vhd, helloworld_sym.hex, helloworld_sym.bin, 32;

#include "sifp.mcc";
#include "sifp_sys.mcc";

//	---------------------------------------------------------------------------
			.org 0;
//	Execution starts at location 0
//	---------------------------------------------------------------------------
			NOP;
			
// test stack operations
			PUSHF;
			PUSHX;
			PUSHY;
			PUSHA;
			LDA, LDY, LDX, M[IMM];
			.data 0;
			POPA;
			POPY;
			POPX;
			LDAI;
			.data 0;
			PUSHA;
			RTS;
			HALT;
// end test			
			MARK2;
			BRANCH;
			.to @QTest - $;
			HALT;
			LDXI;
			.data @StrClear;	// points to clear string
DeadLoop:	MARK2;
			BRANCH;
			.to @Str2UART - $;
			MARK2;
			BRANCH;
			.to @Str2VGA - $;
			LDXI;
			.data @StrHWorld;	// points to "Hello World!"
			BRANCH,;
			.to @DeadLoop - $;
			
StrClear:	.data CLS;
			.data 0;
			
StrHWorld:	.data 'H';
			.data 'e';
			.data 'l';
			.data 'l';
			.data 'o';
			.data ' ';
			.data 'W';
			.data 'o';
			.data 'r';
			.data 'l';
			.data 'd';
			.data '!';
			.data CR;
			.data LF;
			.data 0;
			
// Print string pointed by X to UART 
//			
Str2UART:	NOP;
			PUSHY;
			LDYI;			// Y points to UART memory mapped register
			.data UART_STATUS;
Str2ULoop:	LDA, M[X];		// check if reached end (nul end char)
			IF_AZ;
			.branchto @Done - $;
ChkTxdRdy:	LDA, M[Y];		// read UART status
			SRC;
			SRC;			// TDRE (transmit data register empty) bit is now in AC
			IF_AC;
			.branchto @Str2UOut - $;
			BRANCH;
			.to @ChkTxdRdy - $;
Str2UOut:	INY, LDA, M[X];	// get current char from string, Y points to UART data register
			STA, M[Y];		// output to UART
			DEY, INX, BRANCH;	// Y back to UART status, X to next character 
			.to @Str2ULoop - $;
Done:		POPY;
			RTS;
			
#include "utils.sif";			
#include "vga.sif";			
			
