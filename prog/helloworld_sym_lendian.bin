NOP;                            r_p = M[IMM], r_a = LDA;        data16 =  ' ';                  DeadLoop1: r_a = STA, r_s = M[PUr_p = P2, r_s = M[PUSH];        BRANCH;                         data16 =  @VGATest - $;         r_a = LDA, r_s = M[POP];        r_p = M[IMM], r_a = ADC;        data16 =  1;                    BRANCH;                         data16 =  @DeadLoop1 - $;       r_p = M[IMM], r_y = LDY;        data16 =  0xE000;               r_p = M[IMM], r_a = LDA;        data16 =  3;                    STA, M[Y];                      r_p = M[IMM], r_a = LDA;        data16 =  0x10;                 STA, M[Y];                      r_p = M[IMM], r_x = LDX;        data16 =  @StrClear;            DeadLoop: NOP;                  r_p = P2, r_s = M[PUSH];        BRANCH;                         data16 =  @Str2UART - $;        r_p = M[IMM], r_x = LDX;        data16 =  @StrHWorld;           BRANCH,;                        data16 =  @DeadLoop - $;        StrClear: data16 =  0x1;        data16 =  0;                    StrHWorld: data16 =  'H';       data16 =  'e';                  data16 =  'l';                  data16 =  'l';                  data16 =  'o';                  data16 =  ' ';                  data16 =  'W';                  data16 =  'o';                  data16 =  'r';                  data16 =  'l';                  data16 =  'd';                  data16 =  '!';                  data16 =  0xD;                  data16 =  0xA;                  data16 =  0;                    Str2UART: NOP;                  r_y = STY, r_s = M[PUSH];       r_p = M[IMM], r_y = LDY;        data16 =  0xE000;               Str2ULoop: LDA, M[X];           IF_AZ;                          data16 =  @Done - $;            ChkTxdRdy: LDA, M[Y];           SRC;                            SRC;                            IF_AC;                          data16 =  @Str2UOut - $;        BRANCH;                         data16 =  @ChkTxdRdy - $;       Str2UOut: INY, LDA, M[X];       STA, M[Y];                      DEY, INX, BRANCH;               data16 =  @Str2ULoop - $;       Done: r_y = LDY, r_s = M[POP];  r_p = JMP, r_s = M[POP];        CLC: r_a = STA, r_s = M[PUSH];  r_p = M[IMM], r_a = LDA;        data16 =  0;                    ACSet: SLC;                     r_a = LDA, r_s = M[POP];        ACDone: r_p = JMP, r_s = M[POP];SEC: IF_AC;                     data16 =  @ACDone - $;          CSet: r_a = STA, r_s = M[PUSH]; r_p = M[IMM], r_a = LDA;        data16 =  -1;                   BRANCH;                         data16 =  @ACSet - $;           MulU: r_x = STX, r_s = M[PUSH]; r_p = M[IMM], r_x = LDX;        data16 =  16;                   r_p = M[IMM], r_a = LDA;        data16 =  0;                    CheckY0: r_a = STA, r_s = M[PUSHLDA, Y;                         SRC;                            r_a = LDA, r_s = M[POP];        IF_AC;                          data16 =  @Y01 - $;             Y00: r_p = M[IMM], r_a = ADC;   data16 =  0;                    BRANCH;                         data16 =  @Nextbit - $;         Y01: r_p = P2, r_s = M[PUSH];   BRANCH;                         data16 =  @CLC - $;             ADC, M[S];                      Nextbit: SRC;                   r_a = STA, r_s = M[PUSH];       LDA, Y;                         SRC;                            LDY, A;                         DEX, LDA, M[POP];               IF_XZ;                          data16 =  @CheckY0 - $;         r_x = LDX, r_s = M[POP];        r_p = JMP, r_s = M[POP];        Str2VGA: NOP;                   STY, M[PUSH];                   Str2VGALoop: LDA, M[X];         IF_AZ;                          data16 =  @Str2VGAExit - $;     r_p = M[IMM], r_a = XOR;        data16 =  0xD;                  IF_AZ;                          data16 =  @CarReturn - $;       LDA, M[X];                      r_p = M[IMM], r_a = XOR;        data16 =  0xA;                  IF_AZ;                          data16 =  @LineFeed - $;        LDA, M[X];                      r_p = M[IMM], r_a = XOR;        data16 =  0x2;                  IF_AZ;                          data16 =  @Cur2Home - $;        LDA, M[X];                      r_p = M[IMM], r_a = XOR;        data16 =  0x1;                  IF_AZ;                          data16 =  @ClrScreen - $;       r_x = STX, r_s = M[PUSH];       r_p = P2, r_s = M[PUSH];        BRANCH;                         data16 =  @GetCursorXY - $;     r_p = P2, r_s = M[PUSH];        BRANCH;                         data16 =  @DisplayAt - $;       INX;                            r_p = M[IMM], r_x = CPX;        data16 =  64;                   IF_X_GE;                        data16 =  @NextRow - $;         NoScroll: r_p = P2, r_s = M[PUSHBRANCH;                         data16 =  @SetCursorXY - $;     NextChar: r_x = LDX, r_s = M[POPINX, BRANCH;                    data16 =  @Str2VGALoop - $;     NextRow: r_p = M[IMM], r_x = LDXdata16 =  0;                    NextRow1: INY;                  r_p = M[IMM], r_y = CPY;        data16 =  32;                   IF_Y_GE;                        data16 =  @ScrollUp - $;        BRANCH;                         data16 =  @NoScroll - $;        ScrollUp: NOP;                  r_p = M[IMM], r_y = LDY;        data16 =  0;                    NxtRow: r_y = STY, r_s = M[PUSH]r_p = M[IMM], r_x = LDX;        data16 =  0;                    NxtCol: r_x = STX, r_s = M[PUSH]r_p = P2, r_s = M[PUSH];        BRANCH;                         data16 =  @GetRowBase - $;      r_y = STY, r_s = M[PUSH];       r_p = M[IMM], r_y = ADY;        data16 =  32;                   LDA, r_x = M[X], r_y = M[Y];    r_y = LDY, r_s = M[POP];        STA, r_x = M[X], r_y = M[Y];    INX;                            r_p = M[IMM], r_x = CPX;        data16 =  64;                   IF_X_GE;                        data16 =  @ChkRow - $;          BRANCH;                         data16 =  @NxtCol;              ChkRow: r_y = LDY, r_s = M[POP];INY;                            r_p = M[IMM], r_y = CPY;        data16 =  32 - 1;               IF_Y_GE;                        data16 =  @ClrLastRow - $;      BRANCH;                         data16 =  @NxtRow - $;          ClrLastRow: r_p = P2, r_s = M[PUBRANCH;                         data16 =  @GetRowBase - $;      r_p = M[IMM], r_x = LDX;        data16 =  0;                    r_p = M[IMM], r_a = LDA;        data16 =  ' ';                  ClrRowLoop: STA, r_x = M[X], r_yINX;                            r_p = M[IMM], r_x = CPX;        data16 =  64;                   IF_X_GE;                        data16 =  @ScrDone - $;         BRANCH;                         data16 =  @ClrRowLoop - $;      GetRowBase: r_p = M[IMM], r_x = data16 =  64;                   r_p = P2, r_s = M[PUSH];        BRANCH;                         data16 =  @MulU - $;            r_p = M[IMM], r_y = ADY;        data16 =  0x1000;               ScrDone: r_p = JMP, r_s = M[POP]CarReturn: r_p = P2, r_s = M[PUSBRANCH;                         data16 =  @GetCursorXY - $;     r_p = M[IMM], r_x = LDX;        data16 =  0;                    BRANCH;                         data16 =  @NoScroll - $;        LineFeed: r_p = P2, r_s = M[PUSHBRANCH;                         data16 =  @GetCursorXY - $;     BRANCH;                         data16 =  @NextRow1 - $;        ClrScreen: r_p = M[IMM], r_x = Ldata16 =  64;                   r_p = M[IMM], r_y = LDY;        data16 =  32;                   r_p = P2, r_s = M[PUSH];        BRANCH;                         data16 =  @MulU - $;            r_p = M[IMM], r_x = LDX;        data16 =  0x1000;               r_p = M[IMM], r_a = LDA;        data16 =  ' ';                  ClrPos: DEY;                    STA, r_x = M[X], r_y = M[Y];    IF_YZ;                          data16 =  @ClrPos - $;          STA, r_x = M[X], r_y = M[Y];    Cur2Home: LDX, LDY, M[IMM];     data16 =  0;                    BRANCH;                         data16 =  @NoScroll - $;        Str2VGAExit: r_y = LDY, r_s = M[r_p = JMP, r_s = M[POP];        SetCursorXY: r_a = STA, r_s = M[r_y = STY, r_s = M[PUSH];       r_p = M[IMM], r_y = LDY;        data16 =  0xFF00 + 0;           STX, M[Y];                      INY, r_a = LDA, r_s = M[POP];   STA, M[Y];                      r_a = LDA, r_s = M[POP];        r_p = JMP, r_s = M[POP];        GetCursorXY: r_a = STA, r_s = M[r_p = M[IMM], r_y = LDY;        data16 =  0xFF00 + 0;           LDX, M[Y];                      INY;                            LDA, M[Y];                      r_a = STA, r_s = M[PUSH];       r_y = LDY, r_s = M[POP];        r_a = LDA, r_s = M[POP];        r_p = JMP, r_s = M[POP];        DisplayAt: r_x = STX, r_s = M[PUr_a = STA, r_s = M[PUSH];       r_p = M[IMM], r_x = LDX;        data16 =  64;                   r_p = P2, r_s = M[PUSH];        BRANCH;                         data16 =  @MulU - $;            r_a = LDA, r_s = M[POP];        r_x = LDX, r_s = M[POP];        r_p = M[IMM], r_y = ADY;        data16 =  0x1000;               STA, r_x = M[X], r_y = M[Y];    r_p = JMP, r_s = M[POP];        VGATest: r_a = STA, r_s = M[PUSHr_p = M[IMM], r_y = LDY;        data16 =  0x1000;               r_p = M[IMM], r_x = LDX;        data16 =  0;                    VGATLoop: LDA, X;               ADC, M[S];                      STA, r_x = M[X], r_y = M[Y];    INX;                            r_p = M[IMM], r_x = CPX;        data16 =  64 * 32;              IF_X_GE;                        data16 =  @VGATestEx - $;       BRANCH;                         data16 =  @VGATLoop - $;        VGATestEx: r_a = LDA, r_s = M[POr_p = JMP, r_s = M[POP];        StackTest: r_p = NOP, r_a = NOA,r_x = STX, r_s = M[PUSH];       CPX, M[S];                      IF_XZ;                          data16 =  @ContY - $;           r_p = M[IMM], r_a = A, r_x = X, ContY: r_y = STY, r_s = M[PUSH];CPY, M[S];                      IF_YZ;                          data16 =  @ContA - $;           r_p = M[IMM], r_a = A, r_x = X, ContA: r_a = STA, r_s = M[PUSH];LDA, LDY, LDX, M[IMM];          data16 =  0;                    r_a = LDA, r_s = M[POP];        r_y = LDY, r_s = M[POP];        r_x = LDX, r_s = M[POP];        r_p = NOP, r_a = NOA, r_x = NOX,r_p = JMP, r_s = M[POP];                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        