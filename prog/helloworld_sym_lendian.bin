NOP;                            JUMP;                           data16 =  @Init;                                                                                                                                                                                r_a = STA, r_s = M[PUSH];       r_x = STX, r_s = M[PUSH];       r_y = STY, r_s = M[PUSH];       r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetCursorXY - $;     r_y = STY, r_s = M[PUSH];       r_x = STX, r_s = M[PUSH];       r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetOldCrsXY - $;     CPX, M[POP];                    CPY, M[POP];                    IF_XZ;                          data16 =  @CheckY - $;          BRANCH;                         data16 =  @Revert - $;          CheckY: IF_YZ;                  data16 =  @Flip - $;            BRANCH;                         data16 =  @Revert - $;          Flip: r_p = STP2, r_s = M[PUSH];BRANCH;                         data16 =  @GetRowBase - $;      LDA, r_x = M[X], r_y = M[Y];    r_p = M[IMM], r_a = XOR;        data16 =  0x0080;               STA, r_x = M[X], r_y = M[Y];    BRANCH;                         data16 =  @IntExit - $;         Revert: r_p = STP2, r_s = M[PUSHBRANCH;                         data16 =  @GetRowBase - $;      LDA, r_x = M[X], r_y = M[Y];    r_p = M[IMM], r_a = AND;        data16 =  0xFF7F;               STA, r_x = M[X], r_y = M[Y];    r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetCursorXY - $;     r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @SetOldCrsXY - $;     IntExit: r_y = LDY, r_s = M[POP]r_x = LDX, r_s = M[POP];        r_a = LDA, r_s = M[POP];        r_p = NOP, r_a = NOA, r_x = NOX,r_p = LDP, r_s = M[POP];        Init: r_p = STP2, r_s = M[PUSH];BRANCH;                         data16 =  @VGA_Init - $;        r_p = M[IMM], r_x = LDX;        data16 =  @StrHWorld;           r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @VGA_OutStr - $;      r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @UART_Init - $;       r_p = M[IMM], r_x = LDX;        data16 =  @StrHWorld;           r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @UART_OutStr - $;     r_p = NOP, r_a = A, r_x = X, r_yEchoLoop: r_p = STP2, r_s = M[PUBRANCH;                         data16 =  @UART_GetChr - $;     EchoOut: r_a = STA, r_s = M[PUSHr_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @UART_OutChr - $;     r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @VGA_OutChr - $;      r_a = LDA, r_s = M[POP];        r_p = M[IMM], r_a = XOR;        data16 =  0xD;                  IF_AZ;                          data16 =  @EchoLF - $;          JUMP;                           data16 =  @EchoLoop;            EchoLF: r_p = M[IMM], r_a = LDA;data16 =  0xA;                  JUMP;                           data16 =  @EchoOut;             StrClear: data16 =  0x1;        data16 =  0;                    StrHWorld: data16 =  'H';       data16 =  'e';                  data16 =  'l';                  data16 =  'l';                  data16 =  'o';                  data16 =  ' ';                  data16 =  'W';                  data16 =  'o';                  data16 =  'r';                  data16 =  'l';                  data16 =  'd';                  data16 =  '!';                  StrEnd: data16 =  0xD;          data16 =  0xA;                  data16 =  0;                    CLC: r_a = STA, r_s = M[PUSH];  r_p = M[IMM], r_a = LDA;        data16 =  0;                    ACSet: SLC;                     r_a = LDA, r_s = M[POP];        ACDone: r_p = LDP, r_s = M[POP];SEC: IF_AC;                     data16 =  @ACDone - $;          CSet: r_a = STA, r_s = M[PUSH]; r_p = M[IMM], r_a = LDA;        data16 =  -1;                   BRANCH;                         data16 =  @ACSet - $;           MemCompare: r_a = STA, r_s = M[Pr_p = M[IMM], r_a = XOR;        data16 =  0;                    IF_AZ;                          data16 =  @CompDone - $;        LDA, M[Y];                      XOR, M[X];                      IF_AZ;                          data16 =  @CompCont - $;        CompDone: r_p = M[IMM], r_s = ADdata16 =  1;                    r_p = LDP, r_s = M[POP];        CompCont: INX, INY, r_a = LDA, rr_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @DECA - $;            BRANCH;                         data16 =  @MemCompare - $;      INCA: IF_AC;                    data16 =  @INC0 - $;            r_p = M[IMM], r_a = ADC;        data16 =  1;                    r_p = LDP, r_s = M[POP];        INC0: r_p = M[IMM], r_a = ADC;  data16 =  0;                    r_p = LDP, r_s = M[POP];        DECA: IF_AC;                    data16 =  @DEC2 - $;            r_p = M[IMM], r_a = ADC;        data16 =  0xFFFF;               r_p = LDP, r_s = M[POP];        DEC2: r_p = M[IMM], r_a = ADC;  data16 =  0xFFFE;               r_p = LDP, r_s = M[POP];        MulU: r_x = STX, r_s = M[PUSH]; r_p = M[IMM], r_x = LDX;        data16 =  16;                   r_p = M[IMM], r_a = LDA;        data16 =  0;                    CheckY0: r_a = STA, r_s = M[PUSHLDA, Y;                         SRC;                            r_a = LDA, r_s = M[POP];        IF_AC;                          data16 =  @Y01 - $;             Y00: r_p = M[IMM], r_a = ADC;   data16 =  0;                    BRANCH;                         data16 =  @Nextbit - $;         Y01: r_p = STP2, r_s = M[PUSH]; BRANCH;                         data16 =  @CLC - $;             ADC, M[S];                      Nextbit: SRC;                   r_a = STA, r_s = M[PUSH];       LDA, Y;                         SRC;                            LDY, A;                         DEX, LDA, M[POP];               IF_XZ;                          data16 =  @CheckY0 - $;         r_x = LDX, r_s = M[POP];        r_p = LDP, r_s = M[POP];        StackTest: r_p = NOP, r_a = NOA,r_x = STX, r_s = M[PUSH];       CPX, M[S];                      IF_XZ;                          data16 =  @ContY - $;           r_p = M[IMM], r_a = A, r_x = X, ContY: r_y = STY, r_s = M[PUSH];CPY, M[S];                      IF_YZ;                          data16 =  @ContA - $;           r_p = M[IMM], r_a = A, r_x = X, ContA: r_a = STA, r_s = M[PUSH];LDA, LDY, LDX, M[IMM];          data16 =  0;                    r_a = LDA, r_s = M[POP];        r_y = LDY, r_s = M[POP];        r_x = LDX, r_s = M[POP];        r_p = NOP, r_a = NOA, r_x = NOX,r_p = LDP, r_s = M[POP];        UART_Init: r_p = M[IMM], r_y = Ldata16 =  0xE000;               r_p = M[IMM], r_a = LDA;        data16 =  3;                    STA, M[Y];                      r_p = M[IMM], r_a = LDA;        data16 =  0x10;                 STA, M[Y];                      r_p = LDP, r_s = M[POP];        UART_GetChr: r_y = STY, r_s = M[r_p = M[IMM], r_y = LDY;        data16 =  0xE000;               RdStatus0: LDA, M[Y];           SRC;                            IF_AC;                          data16 =  @GetChr - $;          BRANCH;                         data16 =  @RdStatus0 - $;       GetChr: INY;                    LDA, M[Y];                      r_p = M[IMM], r_a = AND;        data16 =  0x00FF;               r_y = LDY, r_s = M[POP];        r_p = LDP, r_s = M[POP];        UART_Beep: r_p = M[IMM], r_a = Ldata16 =  0x7;                  UART_OutChr: r_y = STY, r_s = M[r_a = STA, r_s = M[PUSH];       r_p = M[IMM], r_y = LDY;        data16 =  0xE000;               RdStatus1: LDA, M[Y];           SRC;                            SRC;                            IF_AC;                          data16 =  @OutChr - $;          BRANCH;                         data16 =  @RdStatus1 - $;       OutChr: INY, LDA, M[POP];       STA, M[Y];                      r_y = LDY, r_s = M[POP];        r_p = LDP, r_s = M[POP];        UART_OutStr: LDA, M[X];         IF_AZ;                          data16 =  @UART_Done - $;       r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @UART_OutChr - $;     INX, BRANCH;                    data16 =  @UART_OutStr - $;     UART_Done: r_p = LDP, r_s = M[POVGA_Init: r_p = STP2, r_s = M[PUBRANCH;                         data16 =  @CLC - $;             r_p = M[IMM], r_a = LDA;        data16 =  64;                   r_a = STA, r_s = M[PUSH];       r_p = M[IMM], r_a = LDA;        data16 =  0x1000;               r_p = M[IMM], r_x = LDX;        data16 =  32;                   r_p = M[IMM], r_y = LDY;        data16 =  0xFF00 + 0;           STA, M[Y];                      RowOffLoop: LDA, M[Y];          INY, ADC, M[S];                 DEX, STA, M[Y];                 IF_XZ;                          data16 =  @RowOffDone - $;      BRANCH;                         data16 =  @RowOffLoop - $;      RowOffDone: r_a = LDA, r_s = M[PLDX, LDY, M[IMM];               data16 =  0;                    r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @SetOldCrsXY - $;     r_p = M[IMM], r_a = LDA;        data16 =  0x1;                  VGA_OutChr: r_x = STX, r_s = M[Pr_y = STY, r_s = M[PUSH];       r_a = STA, r_s = M[PUSH];       r_p = M[IMM], r_a = XOR;        data16 =  0x2;                  IF_AZ;                          data16 =  @VGA_HOME - $;        LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0x1;                  IF_AZ;                          data16 =  @VGA_CLS - $;         r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetCursorXY - $;     LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0xD;                  IF_AZ;                          data16 =  @VGA_CR - $;          LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0xA;                  IF_AZ;                          data16 =  @VGA_LF - $;          LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0x8;                  IF_AZ;                          data16 =  @VGA_BS - $;          r_a = LDA, r_s = M[POP];        VGA_Print: NOP;                 r_y = STY, r_s = M[PUSH];       r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetRowBase - $;      STA, r_x = M[X], r_y = M[Y];    INX, r_y = LDY, r_s = M[POP];   r_p = M[IMM], r_x = CPX;        data16 =  64;                   IF_X_GE;                        data16 =  @NextRow - $;         SetCursorXY: r_y = STY, r_s = M[r_p = M[IMM], r_y = LDY;        data16 =  0xFF00 + 62;          STX, M[Y];                      r_p = M[IMM], r_x = LDX;        data16 =  0xFF00 + 63;          r_y = LDY, r_s = M[POP];        STY, M[X];                      r_y = LDY, r_s = M[POP];        r_x = LDX, r_s = M[POP];        r_p = LDP, r_s = M[POP];        SetOldCrsXY: r_y = STY, r_s = M[r_p = M[IMM], r_y = LDY;        data16 =  0xFF00 + 60;          STX, M[Y];                      r_p = M[IMM], r_x = LDX;        data16 =  0xFF00 + 61;          r_y = LDY, r_s = M[POP];        STY, M[X];                      r_p = LDP, r_s = M[POP];        NextRow: r_p = M[IMM], r_x = LDXdata16 =  0;                    NextRow1: INY;                  r_p = M[IMM], r_y = CPY;        data16 =  32;                   IF_Y_GE;                        data16 =  @ScrollUp - $;        BRANCH;                         data16 =  @SetCursorXY - $;     ScrollUp: r_p = M[IMM], r_y = LDdata16 =  0;                    NxtRow: r_y = STY, r_s = M[PUSH]r_p = M[IMM], r_x = LDX;        data16 =  0;                    r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetRowBase - $;      NxtCol: r_y = STY, r_s = M[PUSH]r_p = M[IMM], r_y = ADY;        data16 =  64;                   LDA, r_x = M[X], r_y = M[Y];    r_y = LDY, r_s = M[POP];        STA, r_x = M[X], r_y = M[Y];    INX;                            r_p = M[IMM], r_x = CPX;        data16 =  64;                   IF_X_GE;                        data16 =  @ChkRow - $;          BRANCH;                         data16 =  @NxtCol - $;          ChkRow: r_y = LDY, r_s = M[POP];INY;                            r_p = M[IMM], r_y = CPY;        data16 =  32 - 1;               IF_Y_GE;                        data16 =  @ClrLastRow - $;      BRANCH;                         data16 =  @NxtRow - $;          ClrLastRow: NOP;                r_p = M[IMM], r_y = LDY;        data16 =  32 - 1;               r_y = STY, r_s = M[PUSH];       r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @ClearRow - $;        r_y = LDY, r_s = M[POP];        BRANCH;                         data16 =  @SetX0 - $;           VGA_CR: r_a = LDA, r_s = M[POP];SetX0: r_p = M[IMM], r_x = LDX; data16 =  0;                    BRANCH;                         data16 =  @SetCursorXY - $;     VGA_BS: r_a = LDA, r_s = M[POP];r_p = M[IMM], r_x = CPX;        data16 =  0;                    IF_XZ;                          data16 =  @PrevRow - $;         DEX, BRANCH;                    data16 =  @SetCursorXY - $;     PrevRow: r_p = M[IMM], r_y = CPYdata16 =  0;                    IF_YZ;                          data16 =  @SetCursorXY - $;     r_p = M[IMM], r_x = LDX;        data16 =  64 - 1;               DEY, BRANCH;                    data16 =  @SetCursorXY - $;     VGA_LF: r_a = LDA, r_s = M[POP];BRANCH;                         data16 =  @NextRow1 - $;        VGA_CLS: r_a = LDA, r_s = M[POP]r_p = M[IMM], r_a = LDA;        data16 =  ' ';                  r_p = M[IMM], r_y = LDY;        data16 =  0;                    ClrNextRow: r_y = STY, r_s = M[Pr_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @ClearRow - $;        r_y = LDY, r_s = M[POP];        INY;                            r_p = M[IMM], r_y = CPY;        data16 =  32;                   IF_Y_GE;                        data16 =  @vga_home1 - $;       BRANCH;                         data16 =  @ClrNextRow - $;      ClearRow: r_p = STP2, r_s = M[PUBRANCH;                         data16 =  @GetRowBase - $;      r_p = M[IMM], r_a = LDA;        data16 =  ' ';                  r_p = M[IMM], r_x = LDX;        data16 =  64 / 8 - 1;           ClrRLoop: STA, r_x = M[X], r_y =IF_XZ;                          data16 =  @ClrDone - $;         DEX, BRANCH;                    data16 =  @ClrRLoop - $;        ClrDone: r_p = LDP, r_s = M[POP]VGA_HOME: r_a = LDA, r_s = M[POPvga_home1: LDX, LDY, M[IMM];    data16 =  0;                    BRANCH;                         data16 =  @SetCursorXY - $;     GetOldCrsXY: r_p = M[IMM], r_y =data16 =  0xFF00 + 60;          LDX, M[Y];                      r_x = STX, r_s = M[PUSH];       r_p = M[IMM], r_x = LDX;        data16 =  0xFF00 + 61;          BRANCH;                         data16 =  @GetCursorY - $;      GetCursorXY: r_p = M[IMM], r_y =data16 =  0xFF00 + 62;          LDX, M[Y];                      r_x = STX, r_s = M[PUSH];       r_p = M[IMM], r_x = LDX;        data16 =  0xFF00 + 63;          GetCursorY: LDY, M[X];          r_x = LDX, r_s = M[POP];        r_p = LDP, r_s = M[POP];        GetRowBase: r_a = STA, r_s = M[Pr_p = M[IMM], r_y = ADY;        data16 =  0xFF00 + 0;           LDA, M[Y];                      LDY, A;                         r_a = LDA, r_s = M[POP];        r_p = LDP, r_s = M[POP];        VGA_OutStr: LDA, M[X];          IF_AZ;                          data16 =  @OutStrDone - $;      r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @VGA_OutChr - $;      INX, BRANCH;                    data16 =  @VGA_OutStr - $;      OutStrDone: r_p = LDP, r_s