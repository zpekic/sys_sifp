NOP;                            JUMP;                           data16 =  @Init;                                                                                                                                                                                r_a = STA, r_s = M[PUSH];       r_x = STX, r_s = M[PUSH];       r_y = STY, r_s = M[PUSH];       r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetOldCrsXY - $;     r_y = STY, r_s = M[PUSH];       r_x = STX, r_s = M[PUSH];       r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetRowBase - $;      LDA, r_x = M[X], r_y = M[Y];    r_p = M[IMM], r_a = AND;        data16 =  0xFF7F;               STA, r_x = M[X], r_y = M[Y];    r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetCursorXY - $;     CPX, M[POP];                    CPY, M[POP];                    IF_XZ;                          data16 =  @CheckY - $;          BRANCH;                         data16 =  @NoFlip - $;          CheckY: IF_YZ;                  data16 =  @Flip - $;            NoFlip: r_p = STP2, r_s = M[PUSHBRANCH;                         data16 =  @SetOldCrsXY - $;     BRANCH;                         data16 =  @IntExit - $;         Flip: r_p = STP2, r_s = M[PUSH];BRANCH;                         data16 =  @GetCursorXY - $;     r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetRowBase - $;      LDA, r_x = M[X], r_y = M[Y];    r_p = M[IMM], r_a = XOR;        data16 =  0x0080;               STA, r_x = M[X], r_y = M[Y];    IntExit: r_y = LDY, r_s = M[POP]r_x = LDX, r_s = M[POP];        r_a = LDA, r_s = M[POP];        r_p = NOP, r_a = NOA, r_x = NOX,r_p = LDP, r_s = M[POP];        Init: r_p = STP2, r_s = M[PUSH];BRANCH;                         data16 =  @VGA_Init - $;        r_p = M[IMM], r_x = LDX;        data16 =  @StrReady;            r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @VGA_OutStr - $;      r_p = STP2, r_a = A, r_x = X, r_r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @UART_Init - $;       r_p = M[IMM], r_x = LDX;        data16 =  @StrReady;            r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @UART_OutStr - $;     r_p = NOP, r_a = A, r_x = X, r_yMainLoop: r_p = M[IMM], r_y = LDdata16 =  0xFF40;               LDX, LDA, M[IMM];               data16 =  0;                    TxtClear: STA, r_x = M[X], r_y =r_p = M[IMM], r_x = CPX;        data16 =  0x0010;               IF_XC;                          data16 =  @TxtCleared - $;      INX, BRANCH;                    data16 =  @TxtClear - $;        TxtCleared: r_p = STP2, r_a = A,r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @CmdEdit - $;         IF_AC;                          data16 =  @ErrOrBrk - $;        r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @Print - $;           r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @CmdExec - $;         IF_AC;                          data16 =  @ErrOrBrk - $;        BRANCH;                         data16 =  @MainLoop - $;        CmdExec: r_p = STP2, r_s = M[PUSBRANCH;                         data16 =  @UART_IsBrk - $;      IF_AC;                          data16 =  @CmdBreak - $;        r_p = M[IMM], r_a = LDA;        data16 =  0xFFFF;               SRC;                            CmdBreak: r_p = LDP, r_s = M[POPErrOrBrk: r_p = M[IMM], r_y = LDdata16 =  @StrBreak;            r_p = M[IMM], r_a = AND;        data16 =  0xFFFF;               IF_AZ;                          data16 =  @Print - $;           r_a = STA, r_s = M[PUSH];       r_p = M[IMM], r_y = LDY;        data16 =  @StrError;            r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @Print - $;           r_a = LDA, r_s = M[POP];        r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @PrintHexA - $;       r_p = M[IMM], r_y = LDY;        data16 =  @StrEnd;              BRANCH;                         data16 =  @Print - $;           CmdEdit: r_p = STP2, r_s = M[PUSBRANCH;                         data16 =  @UART_GetChr - $;     r_a = STA, r_s = M[PUSH];       r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @PrintChr - $;        LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0xD;                  IF_AZ;                          data16 =  @LeaveEdit - $;       LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0x3;                  IF_AZ;                          data16 =  @BrkEdit - $;         LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0x1;                  IF_AZ;                          data16 =  @BrkEdit - $;         LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0x2;                  IF_AZ;                          data16 =  @BrkEdit - $;         LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0x8;                  IF_AZ;                          data16 =  @BSEdit - $;          r_a = LDA, r_s = M[POP];        STA, r_x = M[X], r_y = M[Y];    r_p = M[IMM], r_x = CPX;        data16 =  0x0010;               IF_XZ;                          data16 =  @BumpEnd - $;         r_p = M[IMM], r_a = LDA;        data16 =  0;                    STA, r_x = M[X], r_y = M[Y];    INX, BRANCH;                    data16 =  @CmdEdit - $;         BrkEdit: r_a = LDA, r_s = M[POP]r_p = M[IMM], r_a = LDA;        data16 =  1;                    SRC;                            r_p = LDP, r_s = M[POP];        LeaveEdit: r_a = LDA, r_s = M[POr_p = M[IMM], r_a = LDA;        data16 =  0;                    STA, r_x = M[X], r_y = M[Y];    SRC;                            r_p = LDP, r_s = M[POP];        BSEdit: r_a = LDA, r_s = M[POP];r_p = M[IMM], r_a = LDA;        data16 =  0;                    STA, r_x = M[X], r_y = M[Y];    r_p = M[IMM], r_x = CPX;        data16 =  0;                    IF_XZ;                          data16 =  @BumpStart - $;       DEX, BRANCH;                    data16 =  @CmdEdit - $;         BumpStart: r_x = STX, r_s = M[PUr_y = STY, r_s = M[PUSH];       r_p = M[IMM], r_y = LDY;        data16 =  @StrBeep;             Bumped: r_p = STP2, r_s = M[PUSHBRANCH;                         data16 =  @Print - $;           r_y = LDY, r_s = M[POP];        r_x = LDX, r_s = M[POP];        BRANCH;                         data16 =  @CmdEdit - $;         BumpEnd: r_x = STX, r_s = M[PUSHr_y = STY, r_s = M[PUSH];       r_p = M[IMM], r_y = LDY;        data16 =  @StrBack;             BRANCH;                         data16 =  @Bumped - $;          CLC: r_a = STA, r_s = M[PUSH];  r_p = M[IMM], r_a = LDA;        data16 =  0;                    ACSet: SLC;                     r_a = LDA, r_s = M[POP];        ACDone: r_p = LDP, r_s = M[POP];SEC: IF_AC;                     data16 =  @ACDone - $;          CSet: r_a = STA, r_s = M[PUSH]; r_p = M[IMM], r_a = LDA;        data16 =  -1;                   BRANCH;                         data16 =  @ACSet - $;           Print: LDA, M[Y];               IF_AZ;                          data16 =  @PrintDone - $;       r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @PrintChr - $;        INY, BRANCH;                    data16 =  @Print - $;           PrintDone: r_p = LDP, r_s = M[POPrintChr: r_p = STP2, r_s = M[PUBRANCH;                         data16 =  @VGA_OutChr - $;      r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @UART_OutChr - $;     r_p = LDP, r_s = M[POP];        PrintHexA: r_x = STX, r_s = M[PUr_a = STA, r_s = M[PUSH];       r_p = M[IMM], r_x = LDX;        data16 =  12;                   r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @PrintHex - $;        LDA, M[S];                      r_p = M[IMM], r_x = LDX;        data16 =  8;                    r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @PrintHex - $;        LDA, M[S];                      r_p = M[IMM], r_x = LDX;        data16 =  4;                    r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @PrintHex - $;        LDA, M[S];                      r_p = M[IMM], r_x = LDX;        data16 =  0;                    r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @PrintHex - $;        r_a = LDA, r_s = M[POP];        r_x = LDX, r_s = M[POP];        r_p = LDP, r_s = M[POP];        PrintHex: r_p = M[IMM], r_x = CPdata16 =  0;                    IF_XZ;                          data16 =  @PrintHex1 - $;       SRC, DEX, BRANCH;               data16 =  @PrintHex - $;        PrintHex1: r_p = M[IMM], r_a = Adata16 =  0x000F;               LDX, A;                         r_p = M[IMM], r_x = ADX;        data16 =  '0';                  r_p = M[IMM], r_x = CPX;        data16 =  '0';                  IF_XC;                          data16 =  @ConvAtoF - $;        BRANCH;                         data16 =  @Conv0to9 - $;        ConvAtoF: r_p = M[IMM], r_x = ADdata16 =  '7';                  Conv0to9: LDA, X;               r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @VGA_OutChr - $;      r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @UART_OutChr - $;     r_p = LDP, r_s = M[POP];        UART_Init: r_p = M[IMM], r_y = Ldata16 =  0xE000;               r_p = M[IMM], r_a = LDA;        data16 =  3;                    STA, M[Y];                      r_p = M[IMM], r_a = LDA;        data16 =  0x10;                 STA, M[Y];                      r_p = LDP, r_s = M[POP];        UART_GetChr: r_y = STY, r_s = M[r_p = M[IMM], r_y = LDY;        data16 =  0xE000;               RdStatus0: r_p = STP2, r_s = M[PBRANCH;                         data16 =  @GetStatus - $;       r_p = M[IMM], r_a = AND;        data16 =  0x0001;               IF_AZ;                          data16 =  @RdStatus0 - $;       GetChr: INY;                    LDA, M[Y];                      r_p = M[IMM], r_a = AND;        data16 =  0x00FF;               r_y = LDY, r_s = M[POP];        r_p = LDP, r_s = M[POP];        UART_IsBrk: r_a = STA, r_s = M[Pr_y = STY, r_s = M[PUSH];       r_p = M[IMM], r_y = LDY;        data16 =  0xE000;               r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetStatus - $;       r_p = M[IMM], r_a = AND;        data16 =  0x0001;               IF_AZ;                          data16 =  @NoBrk - $;           INY;                            LDA, M[Y];                      r_p = M[IMM], r_a = XOR;        data16 =  0x3;                  IF_AZ;                          data16 =  @Brk - $;             NoBrk: r_p = M[IMM], r_a = LDA; data16 =  0;                    BRANCH;                         data16 =  @BrkExit - $;         Brk: r_p = M[IMM], r_a = LDA;   data16 =  1;                    SRC;                            BrkExit: r_y = LDY, r_s = M[POP]r_a = LDA, r_s = M[POP];        r_p = LDP, r_s = M[POP];        UART_Beep: r_p = M[IMM], r_a = Ldata16 =  0x7;                  UART_OutChr: r_y = STY, r_s = M[r_a = STA, r_s = M[PUSH];       r_p = M[IMM], r_y = LDY;        data16 =  0xE000;               RdStatus1: r_p = STP2, r_s = M[PBRANCH;                         data16 =  @GetStatus - $;       r_p = M[IMM], r_a = AND;        data16 =  0x0002;               IF_AZ;                          data16 =  @RdStatus1 - $;       OutChr: INY, LDA, M[POP];       STA, M[Y];                      r_y = LDY, r_s = M[POP];        r_p = LDP, r_s = M[POP];        GetStatus: LDA, M[Y];           r_a = STA, r_s = M[PUSH];       LDA, M[Y];                      XOR, M[S];                      IF_AZ;                          data16 =  @StIsStable - $;      r_a = LDA, r_s = M[POP];        BRANCH;                         data16 =  @GetStatus - $;       StIsStable: r_a = LDA, r_s = M[Pr_p = LDP, r_s = M[POP];        UART_OutStr: LDA, M[X];         IF_AZ;                          data16 =  @UART_Done - $;       r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @UART_OutChr - $;     INX, BRANCH;                    data16 =  @UART_OutStr - $;     UART_Done: r_p = LDP, r_s = M[POVGA_Init: r_p = STP2, r_s = M[PUBRANCH;                         data16 =  @CLC - $;             r_p = M[IMM], r_a = LDA;        data16 =  64;                   r_a = STA, r_s = M[PUSH];       r_p = M[IMM], r_a = LDA;        data16 =  0x1000;               r_p = M[IMM], r_x = LDX;        data16 =  32;                   r_p = M[IMM], r_y = LDY;        data16 =  0xFF00 + 0;           STA, M[Y];                      RowOffLoop: LDA, M[Y];          INY, ADC, M[S];                 DEX, STA, M[Y];                 IF_XZ;                          data16 =  @RowOffDone - $;      BRANCH;                         data16 =  @RowOffLoop - $;      RowOffDone: r_a = LDA, r_s = M[PLDX, LDY, M[IMM];               data16 =  0;                    r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @SetOldCrsXY - $;     r_p = M[IMM], r_a = LDA;        data16 =  0x1;                  VGA_OutChr: r_x = STX, r_s = M[Pr_y = STY, r_s = M[PUSH];       r_a = STA, r_s = M[PUSH];       r_p = M[IMM], r_a = XOR;        data16 =  0x2;                  IF_AZ;                          data16 =  @VGA_HOME - $;        LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0x1;                  IF_AZ;                          data16 =  @VGA_CLS - $;         LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0x7;                  IF_AZ;                          data16 =  @VGA_Ignore - $;      r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetCursorXY - $;     LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0xD;                  IF_AZ;                          data16 =  @VGA_CR - $;          LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0xA;                  IF_AZ;                          data16 =  @VGA_LF - $;          LDA, M[S];                      r_p = M[IMM], r_a = XOR;        data16 =  0x8;                  IF_AZ;                          data16 =  @VGA_BS - $;          r_a = LDA, r_s = M[POP];        VGA_Print: NOP;                 r_y = STY, r_s = M[PUSH];       r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetRowBase - $;      STA, r_x = M[X], r_y = M[Y];    INX, r_y = LDY, r_s = M[POP];   r_p = M[IMM], r_x = CPX;        data16 =  64;                   IF_X_GE;                        data16 =  @NextRow - $;         SetCursorXY: r_y = STY, r_s = M[r_p = M[IMM], r_y = LDY;        data16 =  0xFF00 + 62;          STX, M[Y];                      r_p = M[IMM], r_x = LDX;        data16 =  0xFF00 + 63;          r_y = LDY, r_s = M[POP];        STY, M[X];                      r_y = LDY, r_s = M[POP];        r_x = LDX, r_s = M[POP];        r_p = LDP, r_s = M[POP];        VGA_Ignore: r_a = LDA, r_s = M[Pr_y = LDY, r_s = M[POP];        r_x = LDX, r_s = M[POP];        r_p = LDP, r_s = M[POP];        SetOldCrsXY: r_y = STY, r_s = M[r_p = M[IMM], r_y = LDY;        data16 =  0xFF00 + 60;          STX, M[Y];                      r_p = M[IMM], r_x = LDX;        data16 =  0xFF00 + 61;          r_y = LDY, r_s = M[POP];        STY, M[X];                      r_p = LDP, r_s = M[POP];        NextRow: r_p = M[IMM], r_x = LDXdata16 =  0;                    NextRow1: INY;                  r_p = M[IMM], r_y = CPY;        data16 =  32;                   IF_Y_GE;                        data16 =  @ScrollUp - $;        BRANCH;                         data16 =  @SetCursorXY - $;     ScrollUp: r_p = M[IMM], r_y = LDdata16 =  0;                    NxtRow: r_y = STY, r_s = M[PUSH]r_p = M[IMM], r_x = LDX;        data16 =  0;                    r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @GetRowBase - $;      NxtCol: r_y = STY, r_s = M[PUSH]r_p = M[IMM], r_y = ADY;        data16 =  64;                   LDA, r_x = M[X], r_y = M[Y];    r_y = LDY, r_s = M[POP];        STA, r_x = M[X], r_y = M[Y];    INX;                            r_p = M[IMM], r_x = CPX;        data16 =  64;                   IF_X_GE;                        data16 =  @ChkRow - $;          BRANCH;                         data16 =  @NxtCol - $;          ChkRow: r_y = LDY, r_s = M[POP];INY;                            r_p = M[IMM], r_y = CPY;        data16 =  32 - 1;               IF_Y_GE;                        data16 =  @ClrLastRow - $;      BRANCH;                         data16 =  @NxtRow - $;          ClrLastRow: NOP;                r_p = M[IMM], r_y = LDY;        data16 =  32 - 1;               r_y = STY, r_s = M[PUSH];       r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @ClearRow - $;        r_y = LDY, r_s = M[POP];        BRANCH;                         data16 =  @SetX0 - $;           VGA_CR: r_a = LDA, r_s = M[POP];SetX0: r_p = M[IMM], r_x = LDX; data16 =  0;                    BRANCH;                         data16 =  @SetCursorXY - $;     VGA_BS: r_a = LDA, r_s = M[POP];r_p = M[IMM], r_x = CPX;        data16 =  0;                    IF_XZ;                          data16 =  @PrevRow - $;         DEX, BRANCH;                    data16 =  @SetCursorXY - $;     PrevRow: r_p = M[IMM], r_y = CPYdata16 =  0;                    IF_YZ;                          data16 =  @SetCursorXY - $;     r_p = M[IMM], r_x = LDX;        data16 =  64 - 1;               DEY, BRANCH;                    data16 =  @SetCursorXY - $;     VGA_LF: r_a = LDA, r_s = M[POP];BRANCH;                         data16 =  @NextRow1 - $;        VGA_CLS: r_a = LDA, r_s = M[POP]r_p = M[IMM], r_a = LDA;        data16 =  ' ';                  r_p = M[IMM], r_y = LDY;        data16 =  0;                    ClrNextRow: r_y = STY, r_s = M[Pr_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @ClearRow - $;        r_y = LDY, r_s = M[POP];        INY;                            r_p = M[IMM], r_y = CPY;        data16 =  32;                   IF_Y_GE;                        data16 =  @vga_home1 - $;       BRANCH;                         data16 =  @ClrNextRow - $;      ClearRow: r_p = STP2, r_s = M[PUBRANCH;                         data16 =  @GetRowBase - $;      r_p = M[IMM], r_a = LDA;        data16 =  ' ';                  r_p = M[IMM], r_x = LDX;        data16 =  64 / 8 - 1;           ClrRLoop: STA, r_x = M[X], r_y =IF_XZ;                          data16 =  @ClrDone - $;         DEX, BRANCH;                    data16 =  @ClrRLoop - $;        ClrDone: r_p = LDP, r_s = M[POP]VGA_HOME: r_a = LDA, r_s = M[POPvga_home1: LDX, LDY, M[IMM];    data16 =  0;                    BRANCH;                         data16 =  @SetCursorXY - $;     GetOldCrsXY: r_p = M[IMM], r_y =data16 =  0xFF00 + 60;          LDX, M[Y];                      r_x = STX, r_s = M[PUSH];       r_p = M[IMM], r_x = LDX;        data16 =  0xFF00 + 61;          BRANCH;                         data16 =  @GetCursorY - $;      GetCursorXY: r_p = M[IMM], r_y =data16 =  0xFF00 + 62;          LDX, M[Y];                      r_x = STX, r_s = M[PUSH];       r_p = M[IMM], r_x = LDX;        data16 =  0xFF00 + 63;          GetCursorY: LDY, M[X];          r_x = LDX, r_s = M[POP];        r_p = LDP, r_s = M[POP];        GetRowBase: r_a = STA, r_s = M[Pr_p = M[IMM], r_y = ADY;        data16 =  0xFF00 + 0;           LDA, M[Y];                      LDY, A;                         r_a = LDA, r_s = M[POP];        r_p = LDP, r_s = M[POP];        VGA_OutStr: LDA, M[X];          IF_AZ;                          data16 =  @OutStrDone - $;      r_p = STP2, r_s = M[PUSH];      BRANCH;                         data16 =  @VGA_OutChr - $;      INX, BRANCH;                    data16 =  @VGA_OutStr - $;      OutStrDone: r_p = LDP, r_s = M[PStrBreak: data16 =  0xD;        data16 =  0xA;                  data16 =  '*';                  data16 =  'B';                  data16 =  'R';                  data16 =  'E';                  data16 =  'A';                  data16 =  'K';                  data16 =  0;                    StrError: data16 =  0xD;        data16 =  0xA;                  data16 =  '*';                  data16 =  'E';                  data16 =  'R';                  data16 =  'R';                  data16 =  'O';                  data16 =  'R';                  data16 =  ' ';                  StrBeep: data16 =  0x7;         data16 =  0;                    StrBack: data16 =  0x8;         data16 =  0x7;                  data16 =  0;                    StrClear: data16 =  0x1;        data16 =  0;                    StrReady: data16 =  'R';        data16 =  'e';                  data16 =  'a';                  data16 =  'd';                  data16 =  'y';                  data16 =  '.';                  StrEnd: data16 =  0xD;          data16 =  0xA;                  data