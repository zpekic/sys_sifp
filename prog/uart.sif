			.org $;
UART_Init: 	LDYI;
			.data UART_CONTROL;
			LDAI;
			.data 3;	// reset
			STA, M[Y];
			LDAI;
			.data 0x10;	// all int off, 8N2, baudrate / 1
			STA, M[Y];
			RTS;

UART_GetChr:PUSHY;
			LDYI;
			.data UART_STATUS;
RdStatus0:	LDA, M[Y];
			SRC;		// bit 0 is RDRF (receiver data register full)
			IF_AC;
			.branchto @GetChr - $;
			BRANCH;
			.to @RdStatus0 - $;
GetChr:		INY;		// point to UART data register
			LDA, M[Y];
			ANDI;
			.data 0x00FF;	// UART is connected to LSB
			POPY;
			RTS;
			
UART_OutChr:PUSHY;
			PUSHA;
			LDYI;
			.data UART_STATUS;
RdStatus1:	LDA, M[Y];
			SRC;
			SRC;		// bit 1 is TDRE (transmit register empty)
			IF_AC;
			.branchto @OutChr - $;
			BRANCH;
			.to @RdStatus1 - $;
OutChr:		INY, LDA, M[POP];	// Y points to UART data register, get the char back		
			STA, M[Y];
			POPY;
			RTS;
			
UART_OutStr:LDA, M[X];
			IF_AZ;
			.branchto @UART_Done - $;
			MARK2;
			BRANCH;
			.into @UART_OutChr - $;
			INX, BRANCH;
			.data @UART_OutStr - $;
UART_Done:	RTS;