//---------------------------------------------------------------------------------------------
//	Hello world test code for SIFP (c) 2023-... zpekic@hotmail.com
//  Compile with https://github.com/zpekic/MicroCodeCompiler
//---------------------------------------------------------------------------------------------
// Test code to load into internal ROM of SIFP microcomputer
// Full description: 
// https://hackaday.io/project/173996-sifp-single-instruction-format-processor
//---------------------------------------------------------------------------------------------
			.code 12, 16, *_code.mif, *_code.cgf, *_code.coe, cpu:*_code.vhd, *_code.hex, *_code.bin, 2;
			.symbol 12, 256, *_symbol.mif, *_symbol.cgf, *_symbol.coe, sym:*_symbol.vhd, *_symbol.hex, *_symbol.bin, 32;

#include "sifp.mcc";
#include "sifp_sys.mcc";

//	---------------------------------------------------------------------------
			.org 0;
//	Execution starts at location 0
//	---------------------------------------------------------------------------
			INTOFF;		// pro-forma, IE flag is cleared by reset
			TRACEOFF;	// pro-forma, TE flag is cleared by reset
			JA ColdStart;
			
//	---------------------------------------------------------------------------
//	interrupt handling routine
//	---------------------------------------------------------------------------
			.org 8;
IntHandler:	TRACEOFF;
			PUSHA;
			PUSHX;
			PUSHY;
			
			JSR GetOldCrsXY;
			PUSHY;
			PUSHX;
			JSR GetRowBase;
			LDA, M[Y+X];	// get character from VGA RAM
			ANDI 0xFF7F;	// revert to original
			STA, M[Y+X];
			JSR GetCursorXY;
			CPX, M[POP];	// new X - old X
			CPY, M[POP];	// new Y - old Y
			IF_X_NE_THEN NoFlip;
CheckY:		IF_Y_EQ_THEN Flip;
NoFlip:		JSR SetOldCrsXY;
			JR IntExit;
			
Flip:		JSR GetCursorXY;
			JSR GetRowBase;
			LDA, M[Y+X];	// get character from VGA RAM
			XORI 0x0080;	// reverse back and forth
			STA, M[Y+X];
			
IntExit:	POPY;
			POPX;
			POPA;
			RTF;	// F and P were saved when entering the interrupt routine
//	---------------------------------------------------------------------------			

ColdStart:	JSR VGA_Init;

			JSR UART_Init;

			TRACEON;
			//INTON;

			// TODO: other clear
			LDYI @StrReady;
			JSR Print;
			
// -------------------------------------
// hot start
// -------------------------------------
HotStart:	LDXI TXTBUFLEN;
			LDYI TXTBUFFER;
			JSR MemClear;
			
			JSR CmdEdit;
			IF_AC_THEN ErrOrBrk;
			
			// print text buffer
			LDYI TXTBUFFER;
			JSR Print;

			// execute command in text buffer
			JSR CmdExec;
			IF_AC_THEN ErrOrBrk;

			// dead loop
			JR HotStart;

ErrOrBrk:	PUSHA;	
			PUSHA;
			XORI ETX;				// A = CTRL-C?
			IF_A_EQ_THEN BrkMsg;	// yes, just print break message
			LDYI @StrError;
			JR ErrMsg;
BrkMsg:		LDYI @StrBreak;
ErrMsg:		JSR Print;
			POPA;		 			// restore error code
			JSR PrintHex;
			LDAI ' ';
			JSR PrintChr;
			POPA;
			JSR PrintBin;
			LDYI @StrEnd;
			JSR Print;
			JR HotStart;

// -------------------------------------
// EXECUTE
// -------------------------------------
CmdExec:	LDAI 0xFFFF;
			JR SEC;	// just return now with an error code
			

// -------------------------------------
// EDIT SINGLE LINE
// -------------------------------------
CmdEdit:	CLRX;			// X holds position in the buffer
			LDYI TXTBUFFER;	// Y holds start of the buffer

EditLoop:	JSR UART_GetChr;
			STA, M[Y+X];	// write character to the buffer

			XORI CR;		// Enter? 
			IF_A_NE_THEN NotEnter;
			STA, M[Y+X];	// write 0 to terminate buffer
			LDYI @StrEnd;		
			JSR Print;		// Print CR, LF
EditExOk:	LDAI CR;
			JR CLC;			// A=CR, AC=0, return
			
NotEnter:	LDA, M[Y+X];	// get the character back
			XORI ETX;		// CTRL-C? 
			IF_A_NE_THEN NotBreak;
			STA, M[Y+X];	// write 0 to terminate buffer
			LDAI ETX;	
EditExErr:	JSR PrintChr;
			JR SEC;			// A=ESC, AC=1, return with error
			
NotBreak:	LDA, M[Y+X];
			XORI CLS;		// CLS? 
			IF_A_NE_THEN NotCls;
			STA, M[Y+X];	// write 0 to terminate buffer
			LDAI CLS;			
			JR EditExErr;	// indicate break;

NotCls:		LDA, M[Y+X];
			XORI HOME;		// HOME? 
			IF_A_NE_THEN NotHome;
			STA, M[Y+X];	// write 0 to terminate buffer
			LDAI HOME;			
			JR EditExErr;	// indicate break;
			
NotHome:	LDA, M[Y+X];
			XORI BS;		// Backspace?
			IF_A_NE_THEN NotBS;
			CHKX;
			IF_X_EQ_THEN Bumper;
			LDAI BS;
			JSR PrintChr;
			DEX, JR EditNext;	// one position back

Bumper:		LDAI BEL;		// warning beep that we are at left of the edit line
			JSR PrintChr;
EditNext:	CLRA;
			STA, M[Y+X];	// write 0 to terminate buffer	
			JR EditLoop;
			
			// "regular character"
NotBS:		CPXI TXTBUFLEN - 1;
			IF_X_GE_THEN Bumper;
			LDA, M[Y+X];	// load saved character
			JSR PrintChr;
			INX, JR EditNext; 
				
#include "utils.sif";
#include "uart.sif";
#include "vga.sif";		
#include "strings.sif";
	
			
