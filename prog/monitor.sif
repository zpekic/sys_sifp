//---------------------------------------------------------------------------------------------
//	Hello world test code for SIFP (c) 2023-... zpekic@hotmail.com
//  Compile with https://github.com/zpekic/MicroCodeCompiler
//---------------------------------------------------------------------------------------------
// Test code to load into internal ROM of SIFP microcomputer
// Full description: 
// https://hackaday.io/project/173996-sifp-single-instruction-format-processor
//---------------------------------------------------------------------------------------------
			.code 12, 16, *_code.mif, *_code.cgf, *_code.coe, cpu:*_code.vhd, *_code.hex, *_code.bin, 2;
			.symbol 12, 256, *_symbol.mif, *_symbol.cgf, *_symbol.coe, sym:*_symbol.vhd, *_symbol.hex, *_symbol.bin, 32;

#include "sifp.mcc";
#include "sifp_sys.mcc";

//	---------------------------------------------------------------------------
			.org 0;
//	Execution starts at location 0
//	---------------------------------------------------------------------------
			INTOFF;		// pro-forma, IE flag is cleared by reset
			TRACEOFF;	// pro-forma, TE flag is cleared by reset
			JA Init;
			
//	---------------------------------------------------------------------------
//	interrupt handling routine
//	---------------------------------------------------------------------------
			.org 8;
IntHandler:	PUSHA;
			PUSHX;
			PUSHY;

			TRACEON;
			
			MARK2;
			BRANCH;
			.relative GetOldCrsXY;
			PUSHY;
			PUSHX;
			MARK2;
			BRANCH;
			.relative GetRowBase;
			LDA, M[Y+X];	// get character from VGA RAM
			ANDI 0xFF7F;	// revert to original
			STA, M[Y+X];
			MARK2;
			BRANCH;
			.relative GetCursorXY;
			CPX, M[POP];	// new X - old X
			CPY, M[POP];	// new Y - old Y
			IF_XZ;
			.relative CheckY;
			BRANCH;
			.relative NoFlip; 
CheckY:		IF_YZ;
			.relative Flip;
NoFlip:		MARK2;
			BRANCH;
			.relative SetOldCrsXY;
			BRANCH;
			.relative IntExit;
			
Flip:		MARK2;
			BRANCH;
			.relative GetCursorXY;
			MARK2;
			BRANCH;
			.relative GetRowBase;
			LDA, M[Y+X];	// get character from VGA RAM
			XORI 0x0080;	// reverse back and forth
			STA, M[Y+X];
			
IntExit:	POPY;
			POPX;
			POPA;
			RTF;	// F and P were saved when entering the interrupt routine
//	---------------------------------------------------------------------------			

Init:		MARK2;
			BRANCH;
			.relative VGA_Init;

			MARK2;
			BRANCH;
			.relative UART_Init;

			//TRACEON;
			INTON;
PrintLoop:	MARK2;
			BRANCH;
			.relative UART_GetChr;
PrintLoop1:	MARK2;
			BRANCH;
			.relative PrintChr;
			PUSHA;
			XORI ETX;
			IF_AZ;
			.relative Continue;
			POPA;
			XORI CR;
			IF_AZ;
			.relative PrintLF;
			BRANCH;
			.relative PrintLoop;
PrintLF:	LDAI LF;
			BRANCH;
			.relative PrintLoop1; 
			
Continue:	POPA;
			LDXI @StrReady;
			MARK2;
			BRANCH;
			.relative PrintChr;

			MARK2;	// set proper cursor X, Y...
			BRANCH;
			.relative GetCursorXY;
			MARK2;
			BRANCH;
			.relative SetOldCrsXY;
			
			LDAI 0x89AB;
			MARK2;
			BRANCH;
			.relative PrintHex;
			
			INTON;	// and then enable interrupts
			
// -------------------------------------
// MainLoop START
// -------------------------------------
MainLoop:	LDYI TXTBUFFER;
			
			// clear text buffer
			CLRAX;
TxtClear:	STA, M[Y+X];
			CPXI TXTBUFLEN;
			IF_XC;
			.relative TxtCleared;
			INX, BRANCH;
			.relative TxtClear;

TxtCleared: CLRX; // X holds position of cursor within the buffer
			// edit within the text buffer
			MARK2;
			BRANCH;
			.relative CmdEdit;
			IF_AC;
			.relative ErrOrBrk;
			
			// print text buffer
			MARK2;
			BRANCH;
			.relative Print;

			// execute command in text buffer
			MARK2;
			BRANCH;
			.relative CmdExec;
			IF_AC;
			.relative ErrOrBrk;

			// dead loop
			BRANCH;
			.relative MainLoop;
// -------------------------------------
// MainLoop END
// -------------------------------------

CmdExec:	MARK2;
			BRANCH;
			.relative UART_IsBrk;
			IF_AC;
			.relative CmdBreak;
			LDAI 0xFFFF;
			RRC;	
CmdBreak:	RTS;	// just return now with an error code
			
ErrOrBrk:	LDYI @StrBreak;
			LDXI ETX;	
			CPX, A;		// A = CTRL/C?
			IF_AZ;		// yes, just print break message
			.relative Print;
			PUSHA;		// save error code
			LDYI @StrError;
			MARK2;
			BRANCH;
			.relative Print;
			POPA;		 // restore error code
			MARK2;
			BRANCH;
			.relative PrintHexA;
			LDYI @StrEnd;
			BRANCH;
			.relative Print;

CmdEdit:	MARK2;
			BRANCH;
			.relative UART_GetChr;
			PUSHA;

			MARK2;
			BRANCH;
			.relative PrintChr;

			LDA, M[S];
			XORI CR;	// Enter? 
			IF_AZ;
			.relative LeaveEdit;
			
			LDA, M[S];
			XORI ETX;	// CTRL-C? 
			IF_AZ;
			.relative BrkEdit;
			
			LDA, M[S];
			XORI CLS;	// CLS? 
			IF_AZ;
			.relative BrkEdit;

			LDA, M[S];
			XORI HOME;	// HOME? 
			IF_AZ;
			.relative BrkEdit;
			
			LDA, M[S];
			XORI BS;
			IF_AZ;
			.relative BSEdit;
			
			// "regular character"
			POPA;
			STA, M[Y+X];
			CPXI TXTBUFLEN;
			IF_XZ;
			.relative BumpEnd;
			CLRA;
			STA, M[Y+X];
			INX, BRANCH;
			.relative CmdEdit;

			// break edit mode with AC set
BrkEdit:	POPA;
			LDAI 1;
			RRC;
			LDAI ETX;	// ETX code denoted break, not error
			RTS;
			
			// break edit mode with AC cleared
LeaveEdit:	POPA;
			CLRA;
			STA, M[Y+X];
			RRC, RTS;
			
			// clear current character and move one left
BSEdit:		POPA;
			CLRA;
			STA, M[Y+X];
			CPX, A;		// test if X == 0
			IF_XZ;
			.relative BumpStart;
			DEX, BRANCH;
			.relative CmdEdit;

BumpStart:	PUSHX;
			PUSHY;
			LDYI @StrBeep;
Bumped:		MARK2;
			BRANCH;
			.relative Print;
			POPY;
			POPX;
			BRANCH;
			.relative CmdEdit;
			
BumpEnd:	PUSHX;
			PUSHY;
			LDYI @StrBack;
			BRANCH;
			.relative Bumped;
			
#include "utils.sif";
#include "uart.sif";
#include "vga.sif";		
#include "strings.sif";
	
			
