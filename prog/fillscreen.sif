//---------------------------------------------------------------------------------------------
//	Fill screen test code for SIFP (c) 2023-... zpekic@hotmail.com
//  Compile with https://github.com/zpekic/MicroCodeCompiler
//---------------------------------------------------------------------------------------------
// Test code to load into internal ROM of SIFP microcomputer
// Full description: 
// https://hackaday.io/project/173996-sifp-single-instruction-format-processor
//---------------------------------------------------------------------------------------------
			.code 8, 16, fillscreen_code.mif, fillscreen_code.cgf, fillscreen_code.coe, fls:fillscreen_code.vhd, fillscreen_code.hex, fillscreen_code.bin, 2;
			.symbol 8, 256, fillscreen_sym.mif, fillscreen_sym.cgf, fillscreen_sym.coe, fls:fillscreen_sym.vhd, fillscreen_sym.hex, fillscreen_sym.bin, 32;

#include "sifp.mcc";
#include "sifp_sys.mcc";

//	---------------------------------------------------------------------------
			.org 0;
//	Execution starts at location 0
//	---------------------------------------------------------------------------
			BRANCH;
			.to @Start - $;
			
#include "utils.sif";			
#include "vga.sif";
			
Start:		LDA, M[IMM];
			.data ' ';		// start filling screen with space
ALOOP:		LDY, M[IMM];	// Y (row) = 0
			.data 0;
YLOOP:		LDX, M[IMM];	// X (col) = 0
			.data 0;
XLOOP:		MARK2;				// push return address onto stack
			JMP;				// 0
			.into @DISPLAYAT;	// 1
			INX;				// 2, RTS from DISPLAYAT will return here
			CPX, M[IMM];
			.data VGA_COLS - 1;
			IF_XC;
			.branchto @XLOOP - $;
			INY;
			CPY, M[IMM];
			.data VGA_ROWS - 1;
			IF_YC;
			.branchto @YLOOP - $;
			MARK2;
			JMP;
			.into @CLC;
			ADC, M[IMM];
			.data 1;
STOP:		IF_AZ;
			.branchto @STOP - $;	// if A reached 0, dead loop
			BRANCH;
			.to @ALOOP - $;
			
			
			
