			.org $;

// Initialize display
VGA_Init:	LDAI CLS;
			// continue with "clear screen"
			
// Display ASCII in A at CURSOR_X, CURSOR_Y
VGA_OutChr: PUSHX;
			PUSHY;
			ANDI 0x00FF;	// care only about the lower 8-bit
			PUSHA;

			XORI HOME;
			IF_A_EQ_THEN VGA_HOME;
			
			LDA, M[S];
			XORI CLS;
			IF_A_EQ_THEN VGA_CLS;

			LDA, M[S];
			XORI BEL;
			IF_A_EQ_THEN VGA_Ignore;

			LDA, M[S];
			XORI ETX;
			IF_A_EQ_THEN VGA_Ignore;
			
			JSR GetCursorXY;	// get cursor row, col from RAM

			LDA, M[S];
			XORI CR;		
			IF_A_EQ_THEN VGA_CR;

			LDA, M[S];
			XORI LF;		
			IF_A_EQ_THEN VGA_LF;

			LDA, M[S];
			XORI BS;
			IF_A_EQ_THEN VGA_BS;
			
//			default "printable" character output
			POPA;
			
VGA_Print:	PUSHY;
			JSR GetRowBase;
			STA, M[Y+X];
			INX, POPY;
			CPXI VGA_COLS;
			IF_X_GE_THEN NextRow;
SetCursorXY:PUSHY;
			LDYI CURSOR_X;
			STX, M[Y];	// M[CURSOR_X] <= X
			LDXI CURSOR_Y;
			POPY;
			STY, M[X];	// M[CURSOR_Y] <= Y
// main exit restores Y and X
			POPY;
			POPX;
			RTS;

VGA_Ignore: POPA;
			POPY;
			POPX;
			RTS;
			
SetOldCrsXY:PUSHY;
			LDYI CUR_OLDX;
			STX, M[Y];	// M[CUR_OLDX] <= X
			LDXI CUR_OLDY;
			POPY;
			STY, M[X];	// M[CUR_OLDY] <= Y
			RTS;
			
NextRow:	CLRX;
NextRow1:	INY;
			CPYI VGA_ROWS;
			IF_Y_GE_THEN ScrollUp;
			JR SetCursorXY;

ScrollUp: 	LDAI VGA_BASE;
			LDXI VGA_DST;
			STA, M[X];
			JSR CLC;
			ADCI VGA_COLS;
			LDXI VGA_SRC;
			STA, M[X];
			CLRY;

ScrollUpY:	PUSHY;
			CLRX;

ScrollUpX:	PUSHX;
			PUSHX;
			LDXI VGA_SRC;
			LDY, M[X];
			POPX;
			LDA, M[Y+X];
			LDXI VGA_DST;
			LDY, M[X];
			POPX;
			STA, M[Y+X];
			INX;
			CPXI VGA_COLS;
			IF_X_LT_THEN ScrollUpX;
			
			LDXI VGA_DST;
			LDYI VGA_SRC;
			LDA, M[X];
			STA, M[Y];	// M[VGA_SRC] <= M[VGA_DST];
			LDA, M[X];
			JSR CLC;
			ADCI VGA_COLS;
			STA, M[X];	// M[VGA_DST] += VGA_COLS
			
			POPY;
			INY;
			CPYI VGA_ROWS - 1;
			IF_Y_LT_THEN ScrollUpY;
			// clear last row
ClrLastRow:	PUSHY;	
			JSR ClearRow;
			POPY;		// set cursor position to X = 0, Y = ROWS - 1
			JR SetX0;
				
VGA_CR:		POPA;
SetX0:		CLRX;
			JR SetCursorXY;

VGA_BS:		POPA;
			CLRX;
			IF_X_EQ_THEN PrevRow;
			DEX, JR SetCursorXY;
PrevRow:	CHKY;
			IF_Y_EQ_THEN SetCursorXY;
			LDXI VGA_COLS - 1;
			DEY, JR SetCursorXY;
			
VGA_LF:		POPA;
			JR NextRow1;

VGA_CLS:	POPA;
			LDAI ' ';	// use space character to clear screen
			CLRY;
ClrNextRow:	PUSHY; 
			JSR ClearRow;
			POPY;
			INY;
			CPYI VGA_ROWS;
			IF_Y_GE_THEN vga_home1;
			JR ClrNextRow;
			
ClearRow: 	JSR GetRowBase;
			LDAI ' ';
			LDXI VGA_COLS / 8; // bar on the left just to save time
			JR MemFill;
						
VGA_HOME:	POPA;
vga_home1:	CLRXY; // X, Y <= 0
			JR SetCursorXY;

GetOldCrsXY:LDYI CUR_OLDX;
			LDX, M[Y];		// X <= M[CURSOR_X]
			PUSHX;
			LDXI CUR_OLDY;
			JR GetCursorY;

GetCursorXY:LDYI CURSOR_X;
			LDX, M[Y];		// X <= M[CURSOR_X]
			PUSHX;
			LDXI CURSOR_Y;
GetCursorY:	LDY, M[X];		// Y <= M[CURSOR_Y]
			POPX;
			RTS;	

GetRowBase:	PUSHA;
			TYA;			// row into A
			ANDI 0x001F;	// sanitize row 0 - 31
			JSR CLC;		
			RLC;			// 6 left is *64
			RLC;
			RLC;
			RLC;
			RLC;
			RLC;
			TAY;			// to Y as row offset
			ADYI VGA_BASE;	// add VRAM base
			POPA;
			RTS;
			
VGA_OutStr:	LDA, M[X];
			IF_AZ;
			.relative OutStrDone;
			JSR VGA_OutChr;
			INX, BRANCH;
			.relative VGA_OutStr;
OutStrDone:	RTS;
