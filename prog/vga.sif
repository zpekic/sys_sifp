ROW_OFFSET	.alias RAM_BASE + 0;	// space to mark first address of up to 61 rows
CUR_OLDX	.alias RAM_BASE + 60;
CUR_OLDY	.alias RAM_BASE + 61;
CURSOR_X	.alias RAM_BASE + 62;
CURSOR_Y	.alias RAM_BASE + 63;

			.org $;

// Initialize display
VGA_Init:	JSR CLC;
			LDAI VGA_COLS;
			PUSHA;
			LDAI VGA_BASE;	// base address is the start of video RAM
			LDXI VGA_ROWS;
			LDYI ROW_OFFSET;
			STA, M[Y];
RowOffLoop:	LDA, M[Y];		// previous row 
			INY, ADC, M[S];	// add number of columns, point to current row
			DEX, STA, M[Y];
			IF_XZ;
			.relative RowOffDone;
			BRANCH;
			.relative RowOffLoop;
RowOffDone:	POPA;
			CLRXY;
			MARK2;
			BRANCH;
			.relative SetOldCrsXY;	// set "old" cursor (new will be set by CLS)
			LDAI CLS;
			// continue with "clear screen"
			
// Display ASCII in A at CURSOR_X, CURSOR_Y
VGA_OutChr: PUSHX;
			PUSHY;
			PUSHA;
			
			XORI HOME;
			IF_AZ; 
			.relative VGA_HOME;
			
			LDA, M[S];
			XORI CLS;
			IF_AZ; 
			.relative VGA_CLS;

			LDA, M[S];
			XORI BEL;
			IF_AZ; 
			.relative VGA_Ignore;
			
			MARK2;
			BRANCH;
			.relative GetCursorXY;	// get cursor row, col from RAM

			LDA, M[S];
			XORI CR;		
			IF_AZ;
			.relative VGA_CR;

			LDA, M[S];
			XORI LF;		
			IF_AZ; 
			.relative VGA_LF;

			LDA, M[S];
			XORI BS;
			IF_AZ;
			.relative VGA_BS;
			
//			default "printable" character output
			POPA;
			
VGA_Print:	NOP; 
			PUSHY;
			MARK2;
			BRANCH;
			.relative GetRowBase;
			STA, M[Y+X];
			INX, POPY;
			CPXI VGA_COLS;
			IF_X_GE;
			.relative NextRow;
SetCursorXY:PUSHY;
			LDYI CURSOR_X;
			STX, M[Y];	// M[CURSOR_X] <= X
			LDXI CURSOR_Y;
			POPY;
			STY, M[X];	// M[CURSOR_Y] <= Y
// main exit restores Y and X
			POPY;
			POPX;
			RTS;

VGA_Ignore: POPA;
			POPY;
			POPX;
			RTS;
			
SetOldCrsXY:PUSHY;
			LDYI CUR_OLDX;
			STX, M[Y];	// M[CUR_OLDX] <= X
			LDXI CUR_OLDY;
			POPY;
			STY, M[X];	// M[CUR_OLDY] <= Y
			RTS;
			
NextRow:	CLRX;
NextRow1:	INY;
			CPYI VGA_ROWS;
			IF_Y_GE;
			.relative ScrollUp;
			BRANCH;
			.relative SetCursorXY;

ScrollUp:	CLRY;
NxtRow:		PUSHY; 		// we will need row later
			CLRX;
			MARK2;
			BRANCH;
			.relative GetRowBase;
NxtCol:		PUSHY;		// destination base on stack
			ADYI VGA_COLS;	// add to get source base
			LDA, M[Y+X];	// get character from VGA RAM
			POPY;			// destination base
			STA, M[Y+X];	// store character to one row below, same column
			INX;			// next column
			CPXI VGA_COLS;
			IF_X_GE;
			.relative ChkRow;
			BRANCH;
			.relative NxtCol;
ChkRow:		POPY;
			INY;
			CPYI VGA_ROWS - 1;
			IF_Y_GE;
			.relative ClrLastRow;
			BRANCH;
			.relative NxtRow;
			// clear last row
ClrLastRow:	NOP;
			LDYI VGA_ROWS - 1;
			PUSHY;	
			MARK2;
			BRANCH;
			.relative ClearRow;
			POPY;		// set cursor position to X = 0, Y = ROWS - 1
			BRANCH;
			.relative SetX0;
				
VGA_CR:		POPA;
SetX0:		CLRX;
			BRANCH;
			.relative SetCursorXY;

VGA_BS:		POPA;
			CLRX;
			IF_XZ;
			.relative PrevRow;
			DEX, BRANCH;
			.relative SetCursorXY;
PrevRow:	CHKY;
			IF_YZ;
			.relative SetCursorXY;
			LDXI VGA_COLS - 1;
			DEY, BRANCH;
			.relative SetCursorXY;
			
VGA_LF:		POPA;
			BRANCH;
			.relative NextRow1;

VGA_CLS:	POPA;
			LDAI ' ';	// use space character to clear screen
			CLRY;
ClrNextRow:	PUSHY; 
			MARK2;
			BRANCH;
			.relative ClearRow;
			POPY;
			INY;
			CPYI VGA_ROWS;
			IF_Y_GE;
			.relative vga_home1;
			BRANCH;
			.relative ClrNextRow;
			
ClearRow: 	MARK2;
			BRANCH;
			.relative GetRowBase;
			LDAI ' ';
			LDXI VGA_COLS / 8 - 1; // bar on the left just to save time
ClrRLoop:	STA, M[Y+X];
			IF_XZ;
			.relative ClrDone;
			DEX, BRANCH;
			.relative ClrRLoop;
ClrDone:	RTS;			
			
VGA_HOME:	POPA;
vga_home1:	CLRXY; // X, Y <= 0
			BRANCH;
			.relative SetCursorXY;

GetOldCrsXY:LDYI CUR_OLDX;
			LDX, M[Y];		// X <= M[CURSOR_X]
			PUSHX;
			LDXI CUR_OLDY;
			BRANCH;
			.relative GetCursorY;

GetCursorXY:LDYI CURSOR_X;
			LDX, M[Y];		// X <= M[CURSOR_X]
			PUSHX;
			LDXI CURSOR_Y;
GetCursorY:	LDY, M[X];		// Y <= M[CURSOR_Y]
			POPX;
			RTS;	

GetRowBase:	PUSHA;
			ADYI ROW_OFFSET;
			LDA, M[Y];		// row start address in VGA memory
			LDY, A;			// to Y as index base
			POPA;
			RTS;
			
VGA_OutStr:	LDA, M[X];
			IF_AZ;
			.relative OutStrDone;
			MARK2;
			BRANCH;
			.relative VGA_OutChr;
			INX, BRANCH;
			.relative VGA_OutStr;
OutStrDone:	RTS;
